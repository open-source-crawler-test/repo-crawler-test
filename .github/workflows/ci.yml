name: üßê Repo Analyzer

on:
  workflow_dispatch:
  push:

env:
  REDIS_HOST: ${{ secrets.REDIS_HOST }}
  REDIS_PASS: ${{ secrets.REDIS_PASS }}
  REDIS_USER: ${{ secrets.REDIS_USER }}

jobs:
  repo_scan:
    name: "üïµÔ∏è‚Äç‚ôÇÔ∏è Preform repository scan"
    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v3

      - run: sudo chmod -rwx /usr/local/tar

      - name: Cache redis-cli
        uses: actions/cache@v2
        with:
            path: "/usr/bin/redis-cli"
            key: redis-cli-version

      - name: ‚¨áÔ∏è Install redis-cli
        run: |
          if ! command -v redis-cli &> /dev/null
          then
              sudo apt-get install redis
          fi

      - name: Cache bats
        uses: actions/cache@v2
        with:
            path: "/usr/bin/bats"
            key: bats-version
      
      - name: ‚¨áÔ∏è Install bats
        run: |
          if ! command -v bats &> /dev/null
          then
              sudo apt-get install bats
          fi

      - name: ‚öôÔ∏è Execute CRUD operations on RedisDB
        run: |
          chmod +x ./scripts/redis-test.sh
          REDIS_HOST=${{ env.REDIS_HOST }} REDIS_PORT=${{ env.REDIS_PORT }} REDIS_USER=${{ env.REDIS_USER }} REDIS_PASS=${{ env.REDIS_PASS }} ./scripts/redis-test.sh

      - name: ‚úÖ Assert expected data in RedisDB 
        run: REDIS_HOST=${{ env.REDIS_HOST }} REDIS_PORT=${{ env.REDIS_PORT }} REDIS_USER=${{ env.REDIS_USER }} REDIS_PASS=${{ env.REDIS_PASS }} bats ./tests/*

      # - name: "‚è≠ Get next repo URL from queue"
      #   run: |
      #     REPOSITORY="gatsbyjs/gatsby"
      #     echo "repository=${REPOSITORY}" >> $GITHUB_ENV

      # - name: "üïµÔ∏è‚Äç‚ôÇÔ∏è Preform repository scan"
      #   if: ${{ env.repository }}
      #   uses: open-source-crawler-test/repo-scan-test@main
      #   with:
      #     repository: ${{ env.repository }}
      #     typo-scan-exclude-match: '[''typos/**'', ''public/**'']'
      #     REPORT_ARCHIVE_OWNER: open-source-crawler-test
      #     REPORT_ARCHIVE_REPO: repo-scan-archive-test
      #     ARCHIVE_REPO_BRANCH_TARGET: main
      #     ARCHIVE_COMMIT_EMAIL: commit-bot@gmail.com
      #     ARCHIVE_REPO_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
